// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutator.proto

#include "mutator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace MUTATOR {
constexpr AuthRequest::AuthRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AuthRequestDefaultTypeInternal {
  constexpr AuthRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AuthRequestDefaultTypeInternal() {}
  union {
    AuthRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AuthRequestDefaultTypeInternal _AuthRequest_default_instance_;
constexpr MutatorSettings::MutatorSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callbacks_()
  , _callbacks_cached_byte_size_(0)
  , shuffle_(false)
  , block_as_object_(false)
  , block_shuffle_(false)
  , obfuscate_rtti_(false)
  , partition_(false)
  , section_randomization_(false)
  , min_mutation_length_(0u)
  , max_mutation_length_(0u)
  , vm_type_(0)
{}
struct MutatorSettingsDefaultTypeInternal {
  constexpr MutatorSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MutatorSettingsDefaultTypeInternal() {}
  union {
    MutatorSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MutatorSettingsDefaultTypeInternal _MutatorSettings_default_instance_;
constexpr InitializationRequest::InitializationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , symbols_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protected_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , settings_(nullptr){}
struct InitializationRequestDefaultTypeInternal {
  constexpr InitializationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitializationRequestDefaultTypeInternal() {}
  union {
    InitializationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitializationRequestDefaultTypeInternal _InitializationRequest_default_instance_;
constexpr ImportedModule_FunctionsEntry_DoNotUse::ImportedModule_FunctionsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ImportedModule_FunctionsEntry_DoNotUseDefaultTypeInternal {
  constexpr ImportedModule_FunctionsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportedModule_FunctionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ImportedModule_FunctionsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportedModule_FunctionsEntry_DoNotUseDefaultTypeInternal _ImportedModule_FunctionsEntry_DoNotUse_default_instance_;
constexpr ImportedModule::ImportedModule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : functions_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ImportedModuleDefaultTypeInternal {
  constexpr ImportedModuleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImportedModuleDefaultTypeInternal() {}
  union {
    ImportedModule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImportedModuleDefaultTypeInternal _ImportedModule_default_instance_;
constexpr MapperData_ImportsEntry_DoNotUse::MapperData_ImportsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MapperData_ImportsEntry_DoNotUseDefaultTypeInternal {
  constexpr MapperData_ImportsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapperData_ImportsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MapperData_ImportsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapperData_ImportsEntry_DoNotUseDefaultTypeInternal _MapperData_ImportsEntry_DoNotUse_default_instance_;
constexpr MapperData::MapperData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sizes_()
  , _sizes_cached_byte_size_(0)
  , imports_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct MapperDataDefaultTypeInternal {
  constexpr MapperDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapperDataDefaultTypeInternal() {}
  union {
    MapperData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapperDataDefaultTypeInternal _MapperData_default_instance_;
constexpr LaunchData::LaunchData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callables_()
  , _callables_cached_byte_size_(0)
  , entry_(uint64_t{0u}){}
struct LaunchDataDefaultTypeInternal {
  constexpr LaunchDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaunchDataDefaultTypeInternal() {}
  union {
    LaunchData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaunchDataDefaultTypeInternal _LaunchData_default_instance_;
constexpr ExportCallback::ExportCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(0u)
  , is_const_(false)
  , is_callable_(false)
  , unique_id_(0u){}
struct ExportCallbackDefaultTypeInternal {
  constexpr ExportCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExportCallbackDefaultTypeInternal() {}
  union {
    ExportCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExportCallbackDefaultTypeInternal _ExportCallback_default_instance_;
constexpr ExpireCallback::ExpireCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_left_(uint64_t{0u}){}
struct ExpireCallbackDefaultTypeInternal {
  constexpr ExpireCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpireCallbackDefaultTypeInternal() {}
  union {
    ExpireCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpireCallbackDefaultTypeInternal _ExpireCallback_default_instance_;
constexpr VersionUpdateCallback::VersionUpdateCallback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VersionUpdateCallbackDefaultTypeInternal {
  constexpr VersionUpdateCallbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VersionUpdateCallbackDefaultTypeInternal() {}
  union {
    VersionUpdateCallback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VersionUpdateCallbackDefaultTypeInternal _VersionUpdateCallback_default_instance_;
constexpr CallbackResponse::CallbackResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : export__(nullptr)
  , expire_(nullptr)
  , version_(nullptr)
  , type_(0)
{}
struct CallbackResponseDefaultTypeInternal {
  constexpr CallbackResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallbackResponseDefaultTypeInternal() {}
  union {
    CallbackResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallbackResponseDefaultTypeInternal _CallbackResponse_default_instance_;
constexpr ServerResponse::ServerResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : binaries_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mapperdata_(nullptr)
  , launchdata_(nullptr)
  , callback_(nullptr)
  , type_(0u)
  , status_(0u)
  , session_id_(0u){}
struct ServerResponseDefaultTypeInternal {
  constexpr ServerResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerResponseDefaultTypeInternal() {}
  union {
    ServerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
constexpr InstanceRequest::InstanceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mapper_(false)
  , unique_key_(0u){}
struct InstanceRequestDefaultTypeInternal {
  constexpr InstanceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceRequestDefaultTypeInternal() {}
  union {
    InstanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceRequestDefaultTypeInternal _InstanceRequest_default_instance_;
constexpr MutatorRequest_ImportsEntry_DoNotUse::MutatorRequest_ImportsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MutatorRequest_ImportsEntry_DoNotUseDefaultTypeInternal {
  constexpr MutatorRequest_ImportsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MutatorRequest_ImportsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MutatorRequest_ImportsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MutatorRequest_ImportsEntry_DoNotUseDefaultTypeInternal _MutatorRequest_ImportsEntry_DoNotUse_default_instance_;
constexpr MutatorRequest::MutatorRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bases_()
  , _bases_cached_byte_size_(0)
  , imports_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , unique_key_(0u){}
struct MutatorRequestDefaultTypeInternal {
  constexpr MutatorRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MutatorRequestDefaultTypeInternal() {}
  union {
    MutatorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MutatorRequestDefaultTypeInternal _MutatorRequest_default_instance_;
}  // namespace MUTATOR
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mutator_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mutator_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mutator_2eproto = nullptr;

const uint32_t TableStruct_mutator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::AuthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::AuthRequest, auth_token_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, shuffle_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, block_as_object_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, block_shuffle_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, obfuscate_rtti_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, partition_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, section_randomization_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, min_mutation_length_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, max_mutation_length_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, vm_type_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorSettings, callbacks_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, binary_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, symbols_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, protected_binary_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InitializationRequest, settings_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ImportedModule, functions_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData_ImportsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData_ImportsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData_ImportsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData_ImportsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData, sizes_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MapperData, imports_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::LaunchData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::LaunchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::LaunchData, entry_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::LaunchData, callables_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, name_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, size_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, value_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, is_const_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, is_callable_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExportCallback, unique_id_),
  0,
  2,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExpireCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExpireCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ExpireCallback, time_left_),
  0,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::VersionUpdateCallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::VersionUpdateCallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::VersionUpdateCallback, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, type_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, export__),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, expire_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::CallbackResponse, version_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, token_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, type_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, status_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, session_id_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, binaries_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, mapperdata_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, launchdata_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::ServerResponse, callback_),
  0,
  4,
  5,
  6,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InstanceRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InstanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InstanceRequest, mapper_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::InstanceRequest, unique_key_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest, unique_key_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest, bases_),
  PROTOBUF_FIELD_OFFSET(::MUTATOR::MutatorRequest, imports_),
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MUTATOR::AuthRequest)},
  { 7, 23, -1, sizeof(::MUTATOR::MutatorSettings)},
  { 33, 43, -1, sizeof(::MUTATOR::InitializationRequest)},
  { 47, 55, -1, sizeof(::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse)},
  { 57, -1, -1, sizeof(::MUTATOR::ImportedModule)},
  { 64, 72, -1, sizeof(::MUTATOR::MapperData_ImportsEntry_DoNotUse)},
  { 74, -1, -1, sizeof(::MUTATOR::MapperData)},
  { 82, 90, -1, sizeof(::MUTATOR::LaunchData)},
  { 92, 104, -1, sizeof(::MUTATOR::ExportCallback)},
  { 110, 117, -1, sizeof(::MUTATOR::ExpireCallback)},
  { 118, 125, -1, sizeof(::MUTATOR::VersionUpdateCallback)},
  { 126, 136, -1, sizeof(::MUTATOR::CallbackResponse)},
  { 140, 154, -1, sizeof(::MUTATOR::ServerResponse)},
  { 162, 170, -1, sizeof(::MUTATOR::InstanceRequest)},
  { 172, 180, -1, sizeof(::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse)},
  { 182, 191, -1, sizeof(::MUTATOR::MutatorRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_AuthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_MutatorSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_InitializationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_ImportedModule_FunctionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_ImportedModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_MapperData_ImportsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_MapperData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_LaunchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_ExportCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_ExpireCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_VersionUpdateCallback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_CallbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_ServerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_InstanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_MutatorRequest_ImportsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MUTATOR::_MutatorRequest_default_instance_),
};

const char descriptor_table_protodef_mutator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmutator.proto\022\007MUTATOR\"!\n\013AuthRequest\022"
  "\022\n\nauth_token\030\001 \001(\t\"\360\003\n\017MutatorSettings\022"
  "\024\n\007shuffle\030\001 \001(\010H\000\210\001\001\022\034\n\017block_as_object"
  "\030\002 \001(\010H\001\210\001\001\022\032\n\rblock_shuffle\030\003 \001(\010H\002\210\001\001\022"
  "\033\n\016obfuscate_rtti\030\004 \001(\010H\003\210\001\001\022\026\n\tpartitio"
  "n\030\005 \001(\010H\004\210\001\001\022\"\n\025section_randomization\030\006 "
  "\001(\010H\005\210\001\001\022 \n\023min_mutation_length\030\007 \001(\rH\006\210"
  "\001\001\022 \n\023max_mutation_length\030\010 \001(\rH\007\210\001\001\022!\n\007"
  "vm_type\030\t \001(\0162\013.MUTATOR.VMH\010\210\001\001\022$\n\tcallb"
  "acks\030\n \003(\0162\021.MUTATOR.CallbackB\n\n\010_shuffl"
  "eB\022\n\020_block_as_objectB\020\n\016_block_shuffleB"
  "\021\n\017_obfuscate_rttiB\014\n\n_partitionB\030\n\026_sec"
  "tion_randomizationB\026\n\024_min_mutation_leng"
  "thB\026\n\024_max_mutation_lengthB\n\n\010_vm_type\"\252"
  "\001\n\025InitializationRequest\022\016\n\006binary\030\001 \001(\014"
  "\022\017\n\007symbols\030\002 \001(\014\022\035\n\020protected_binary\030\003 "
  "\001(\014H\000\210\001\001\022/\n\010settings\030\004 \001(\0132\030.MUTATOR.Mut"
  "atorSettingsH\001\210\001\001B\023\n\021_protected_binaryB\013"
  "\n\t_settings\"}\n\016ImportedModule\0229\n\tfunctio"
  "ns\030\002 \003(\0132&.MUTATOR.ImportedModule.Functi"
  "onsEntry\0320\n\016FunctionsEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\004:\0028\001\"\227\001\n\nMapperData\022\r\n\005siz"
  "es\030\001 \003(\r\0221\n\007imports\030\002 \003(\0132 .MUTATOR.Mapp"
  "erData.ImportsEntry\032G\n\014ImportsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.MUTATOR.Import"
  "edModule:\0028\001\"=\n\nLaunchData\022\022\n\005entry\030\001 \001("
  "\004H\000\210\001\001\022\021\n\tcallables\030\002 \003(\004B\010\n\006_entry\"\332\001\n\016"
  "ExportCallback\022\021\n\004name\030\001 \001(\tH\000\210\001\001\022\021\n\004siz"
  "e\030\002 \001(\rH\001\210\001\001\022\022\n\005value\030\003 \001(\014H\002\210\001\001\022\025\n\010is_c"
  "onst\030\004 \001(\010H\003\210\001\001\022\030\n\013is_callable\030\005 \001(\010H\004\210\001"
  "\001\022\026\n\tunique_id\030\006 \001(\rH\005\210\001\001B\007\n\005_nameB\007\n\005_s"
  "izeB\010\n\006_valueB\013\n\t_is_constB\016\n\014_is_callab"
  "leB\014\n\n_unique_id\"6\n\016ExpireCallback\022\026\n\tti"
  "me_left\030\001 \001(\004H\000\210\001\001B\014\n\n_time_left\"9\n\025Vers"
  "ionUpdateCallback\022\024\n\007version\030\001 \001(\tH\000\210\001\001B"
  "\n\n\010_version\"\365\001\n\020CallbackResponse\022$\n\004type"
  "\030\001 \001(\0162\021.MUTATOR.CallbackH\000\210\001\001\022,\n\006export"
  "\030\002 \001(\0132\027.MUTATOR.ExportCallbackH\001\210\001\001\022,\n\006"
  "expire\030\003 \001(\0132\027.MUTATOR.ExpireCallbackH\002\210"
  "\001\001\0224\n\007version\030\004 \001(\0132\036.MUTATOR.VersionUpd"
  "ateCallbackH\003\210\001\001B\007\n\005_typeB\t\n\007_exportB\t\n\007"
  "_expireB\n\n\010_version\"\335\002\n\016ServerResponse\022\022"
  "\n\005token\030\001 \001(\tH\000\210\001\001\022\021\n\004type\030\002 \001(\rH\001\210\001\001\022\023\n"
  "\006status\030\003 \001(\rH\002\210\001\001\022\027\n\nsession_id\030\004 \001(\rH\003"
  "\210\001\001\022\020\n\010binaries\030\005 \003(\014\022,\n\nmapperData\030\006 \001("
  "\0132\023.MUTATOR.MapperDataH\004\210\001\001\022,\n\nlaunchDat"
  "a\030\007 \001(\0132\023.MUTATOR.LaunchDataH\005\210\001\001\0220\n\010cal"
  "lback\030\010 \001(\0132\031.MUTATOR.CallbackResponseH\006"
  "\210\001\001B\010\n\006_tokenB\007\n\005_typeB\t\n\007_statusB\r\n\013_se"
  "ssion_idB\r\n\013_mapperDataB\r\n\013_launchDataB\013"
  "\n\t_callback\"Y\n\017InstanceRequest\022\023\n\006mapper"
  "\030\001 \001(\010H\000\210\001\001\022\027\n\nunique_key\030\002 \001(\rH\001\210\001\001B\t\n\007"
  "_mapperB\r\n\013_unique_key\"\307\001\n\016MutatorReques"
  "t\022\027\n\nunique_key\030\001 \001(\rH\000\210\001\001\022\r\n\005bases\030\002 \003("
  "\004\0225\n\007imports\030\003 \003(\0132$.MUTATOR.MutatorRequ"
  "est.ImportsEntry\032G\n\014ImportsEntry\022\013\n\003key\030"
  "\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.MUTATOR.ImportedM"
  "odule:\0028\001B\r\n\013_unique_key* \n\002VM\022\013\n\007VM_NON"
  "E\020\000\022\r\n\tVM_OREANS\020\001*\247\001\n\010Callback\022\021\n\rCALLB"
  "ACK_NONE\020\000\022\030\n\024CALLBACK_EXPORT_INIT\020\001\022\030\n\024"
  "CALLBACK_EXPORT_MMAP\020\002\022 \n\034CALLBACK_SUBSC"
  "RIPTION_EXPIRE\020\003\022\033\n\027CALLBACK_VERSION_UPD"
  "ATE\020\004\022\025\n\021CALLBACK_RESERVED\020\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mutator_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mutator_2eproto = {
  false, false, 2516, descriptor_table_protodef_mutator_2eproto, "mutator.proto", 
  &descriptor_table_mutator_2eproto_once, nullptr, 0, 16,
  schemas, file_default_instances, TableStruct_mutator_2eproto::offsets,
  file_level_metadata_mutator_2eproto, file_level_enum_descriptors_mutator_2eproto, file_level_service_descriptors_mutator_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mutator_2eproto_getter() {
  return &descriptor_table_mutator_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mutator_2eproto(&descriptor_table_mutator_2eproto);
namespace MUTATOR {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mutator_2eproto);
  return file_level_enum_descriptors_mutator_2eproto[0];
}
bool VM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Callback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mutator_2eproto);
  return file_level_enum_descriptors_mutator_2eproto[1];
}
bool Callback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AuthRequest::_Internal {
 public:
};

AuthRequest::AuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.AuthRequest)
}
AuthRequest::AuthRequest(const AuthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_token().empty()) {
    auth_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MUTATOR.AuthRequest)
}

inline void AuthRequest::SharedCtor() {
auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:MUTATOR.AuthRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AuthRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthRequest::ArenaDtor(void* object) {
  AuthRequest* _this = reinterpret_cast< AuthRequest* >(object);
  (void)_this;
}
void AuthRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AuthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.AuthRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string auth_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MUTATOR.AuthRequest.auth_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.AuthRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string auth_token = 1;
  if (!this->_internal_auth_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth_token().data(), static_cast<int>(this->_internal_auth_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MUTATOR.AuthRequest.auth_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_auth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.AuthRequest)
  return target;
}

size_t AuthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.AuthRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string auth_token = 1;
  if (!this->_internal_auth_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthRequest::GetClassData() const { return &_class_data_; }

void AuthRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthRequest *>(to)->MergeFrom(
      static_cast<const AuthRequest &>(from));
}


void AuthRequest::MergeFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.AuthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_auth_token().empty()) {
    _internal_set_auth_token(from._internal_auth_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.AuthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  return true;
}

void AuthRequest::InternalSwap(AuthRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_token_, lhs_arena,
      &other->auth_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[0]);
}

// ===================================================================

class MutatorSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<MutatorSettings>()._has_bits_);
  static void set_has_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_block_as_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_block_shuffle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_obfuscate_rtti(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partition(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_section_randomization(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_min_mutation_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_mutation_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

MutatorSettings::MutatorSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  callbacks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.MutatorSettings)
}
MutatorSettings::MutatorSettings(const MutatorSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      callbacks_(from.callbacks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shuffle_, &from.shuffle_,
    static_cast<size_t>(reinterpret_cast<char*>(&vm_type_) -
    reinterpret_cast<char*>(&shuffle_)) + sizeof(vm_type_));
  // @@protoc_insertion_point(copy_constructor:MUTATOR.MutatorSettings)
}

inline void MutatorSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shuffle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vm_type_) -
    reinterpret_cast<char*>(&shuffle_)) + sizeof(vm_type_));
}

MutatorSettings::~MutatorSettings() {
  // @@protoc_insertion_point(destructor:MUTATOR.MutatorSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MutatorSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MutatorSettings::ArenaDtor(void* object) {
  MutatorSettings* _this = reinterpret_cast< MutatorSettings* >(object);
  (void)_this;
}
void MutatorSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutatorSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MutatorSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.MutatorSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callbacks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&shuffle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_mutation_length_) -
        reinterpret_cast<char*>(&shuffle_)) + sizeof(max_mutation_length_));
  }
  vm_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutatorSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool shuffle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shuffle(&has_bits);
          shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool block_as_object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_block_as_object(&has_bits);
          block_as_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool block_shuffle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_block_shuffle(&has_bits);
          block_shuffle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool obfuscate_rtti = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_obfuscate_rtti(&has_bits);
          obfuscate_rtti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool partition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_partition(&has_bits);
          partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool section_randomization = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_section_randomization(&has_bits);
          section_randomization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_mutation_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_min_mutation_length(&has_bits);
          min_mutation_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_mutation_length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_mutation_length(&has_bits);
          max_mutation_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.VM vm_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vm_type(static_cast<::MUTATOR::VM>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .MUTATOR.Callback callbacks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_callbacks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_callbacks(static_cast<::MUTATOR::Callback>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MutatorSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.MutatorSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool shuffle = 1;
  if (_internal_has_shuffle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_shuffle(), target);
  }

  // optional bool block_as_object = 2;
  if (_internal_has_block_as_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_block_as_object(), target);
  }

  // optional bool block_shuffle = 3;
  if (_internal_has_block_shuffle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_block_shuffle(), target);
  }

  // optional bool obfuscate_rtti = 4;
  if (_internal_has_obfuscate_rtti()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_obfuscate_rtti(), target);
  }

  // optional bool partition = 5;
  if (_internal_has_partition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_partition(), target);
  }

  // optional bool section_randomization = 6;
  if (_internal_has_section_randomization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_section_randomization(), target);
  }

  // optional uint32 min_mutation_length = 7;
  if (_internal_has_min_mutation_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_min_mutation_length(), target);
  }

  // optional uint32 max_mutation_length = 8;
  if (_internal_has_max_mutation_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_mutation_length(), target);
  }

  // optional .MUTATOR.VM vm_type = 9;
  if (_internal_has_vm_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_vm_type(), target);
  }

  // repeated .MUTATOR.Callback callbacks = 10;
  {
    int byte_size = _callbacks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          10, callbacks_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.MutatorSettings)
  return target;
}

size_t MutatorSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.MutatorSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MUTATOR.Callback callbacks = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_callbacks_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_callbacks(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _callbacks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool shuffle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool block_as_object = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool block_shuffle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool obfuscate_rtti = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool partition = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool section_randomization = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 min_mutation_length = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_mutation_length());
    }

    // optional uint32 max_mutation_length = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_mutation_length());
    }

  }
  // optional .MUTATOR.VM vm_type = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_vm_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MutatorSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MutatorSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MutatorSettings::GetClassData() const { return &_class_data_; }

void MutatorSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MutatorSettings *>(to)->MergeFrom(
      static_cast<const MutatorSettings &>(from));
}


void MutatorSettings::MergeFrom(const MutatorSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.MutatorSettings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  callbacks_.MergeFrom(from.callbacks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      shuffle_ = from.shuffle_;
    }
    if (cached_has_bits & 0x00000002u) {
      block_as_object_ = from.block_as_object_;
    }
    if (cached_has_bits & 0x00000004u) {
      block_shuffle_ = from.block_shuffle_;
    }
    if (cached_has_bits & 0x00000008u) {
      obfuscate_rtti_ = from.obfuscate_rtti_;
    }
    if (cached_has_bits & 0x00000010u) {
      partition_ = from.partition_;
    }
    if (cached_has_bits & 0x00000020u) {
      section_randomization_ = from.section_randomization_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_mutation_length_ = from.min_mutation_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_mutation_length_ = from.max_mutation_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_vm_type(from._internal_vm_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MutatorSettings::CopyFrom(const MutatorSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.MutatorSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutatorSettings::IsInitialized() const {
  return true;
}

void MutatorSettings::InternalSwap(MutatorSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callbacks_.InternalSwap(&other->callbacks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutatorSettings, vm_type_)
      + sizeof(MutatorSettings::vm_type_)
      - PROTOBUF_FIELD_OFFSET(MutatorSettings, shuffle_)>(
          reinterpret_cast<char*>(&shuffle_),
          reinterpret_cast<char*>(&other->shuffle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutatorSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[1]);
}

// ===================================================================

class InitializationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InitializationRequest>()._has_bits_);
  static void set_has_protected_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MUTATOR::MutatorSettings& settings(const InitializationRequest* msg);
  static void set_has_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::MUTATOR::MutatorSettings&
InitializationRequest::_Internal::settings(const InitializationRequest* msg) {
  return *msg->settings_;
}
InitializationRequest::InitializationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.InitializationRequest)
}
InitializationRequest::InitializationRequest(const InitializationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binary().empty()) {
    binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_binary(), 
      GetArenaForAllocation());
  }
  symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbols().empty()) {
    symbols_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbols(), 
      GetArenaForAllocation());
  }
  protected_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protected_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_protected_binary()) {
    protected_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protected_binary(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::MUTATOR::MutatorSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MUTATOR.InitializationRequest)
}

inline void InitializationRequest::SharedCtor() {
binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
symbols_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  symbols_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protected_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protected_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
settings_ = nullptr;
}

InitializationRequest::~InitializationRequest() {
  // @@protoc_insertion_point(destructor:MUTATOR.InitializationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitializationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  symbols_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protected_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void InitializationRequest::ArenaDtor(void* object) {
  InitializationRequest* _this = reinterpret_cast< InitializationRequest* >(object);
  (void)_this;
}
void InitializationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitializationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.InitializationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_.ClearToEmpty();
  symbols_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      protected_binary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(settings_ != nullptr);
      settings_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes binary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes symbols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbols();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes protected_binary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_protected_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.MutatorSettings settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InitializationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.InitializationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes binary = 1;
  if (!this->_internal_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_binary(), target);
  }

  // bytes symbols = 2;
  if (!this->_internal_symbols().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_symbols(), target);
  }

  // optional bytes protected_binary = 3;
  if (_internal_has_protected_binary()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_protected_binary(), target);
  }

  // optional .MUTATOR.MutatorSettings settings = 4;
  if (_internal_has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.InitializationRequest)
  return target;
}

size_t InitializationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.InitializationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes binary = 1;
  if (!this->_internal_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binary());
  }

  // bytes symbols = 2;
  if (!this->_internal_symbols().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_symbols());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes protected_binary = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_protected_binary());
    }

    // optional .MUTATOR.MutatorSettings settings = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitializationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitializationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitializationRequest::GetClassData() const { return &_class_data_; }

void InitializationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InitializationRequest *>(to)->MergeFrom(
      static_cast<const InitializationRequest &>(from));
}


void InitializationRequest::MergeFrom(const InitializationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.InitializationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_binary().empty()) {
    _internal_set_binary(from._internal_binary());
  }
  if (!from._internal_symbols().empty()) {
    _internal_set_symbols(from._internal_symbols());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_protected_binary(from._internal_protected_binary());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_settings()->::MUTATOR::MutatorSettings::MergeFrom(from._internal_settings());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitializationRequest::CopyFrom(const InitializationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.InitializationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializationRequest::IsInitialized() const {
  return true;
}

void InitializationRequest::InternalSwap(InitializationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &binary_, lhs_arena,
      &other->binary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &symbols_, lhs_arena,
      &other->symbols_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &protected_binary_, lhs_arena,
      &other->protected_binary_, rhs_arena
  );
  swap(settings_, other->settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[2]);
}

// ===================================================================

ImportedModule_FunctionsEntry_DoNotUse::ImportedModule_FunctionsEntry_DoNotUse() {}
ImportedModule_FunctionsEntry_DoNotUse::ImportedModule_FunctionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ImportedModule_FunctionsEntry_DoNotUse::MergeFrom(const ImportedModule_FunctionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ImportedModule_FunctionsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[3]);
}

// ===================================================================

class ImportedModule::_Internal {
 public:
};

ImportedModule::ImportedModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  functions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.ImportedModule)
}
ImportedModule::ImportedModule(const ImportedModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  functions_.MergeFrom(from.functions_);
  // @@protoc_insertion_point(copy_constructor:MUTATOR.ImportedModule)
}

inline void ImportedModule::SharedCtor() {
}

ImportedModule::~ImportedModule() {
  // @@protoc_insertion_point(destructor:MUTATOR.ImportedModule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImportedModule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImportedModule::ArenaDtor(void* object) {
  ImportedModule* _this = reinterpret_cast< ImportedModule* >(object);
  (void)_this;
  _this->functions_. ~MapField();
}
inline void ImportedModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ImportedModule::ArenaDtor);
  }
}
void ImportedModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImportedModule::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.ImportedModule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  functions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImportedModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint64> functions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&functions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImportedModule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.ImportedModule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint64> functions = 2;
  if (!this->_internal_functions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MUTATOR.ImportedModule.FunctionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_functions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_functions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
          it = this->_internal_functions().begin();
          it != this->_internal_functions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ImportedModule_FunctionsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
          it = this->_internal_functions().begin();
          it != this->_internal_functions().end(); ++it) {
        target = ImportedModule_FunctionsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.ImportedModule)
  return target;
}

size_t ImportedModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.ImportedModule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint64> functions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_functions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_functions().begin();
      it != this->_internal_functions().end(); ++it) {
    total_size += ImportedModule_FunctionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImportedModule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImportedModule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImportedModule::GetClassData() const { return &_class_data_; }

void ImportedModule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImportedModule *>(to)->MergeFrom(
      static_cast<const ImportedModule &>(from));
}


void ImportedModule::MergeFrom(const ImportedModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.ImportedModule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  functions_.MergeFrom(from.functions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImportedModule::CopyFrom(const ImportedModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.ImportedModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportedModule::IsInitialized() const {
  return true;
}

void ImportedModule::InternalSwap(ImportedModule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  functions_.InternalSwap(&other->functions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImportedModule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[4]);
}

// ===================================================================

MapperData_ImportsEntry_DoNotUse::MapperData_ImportsEntry_DoNotUse() {}
MapperData_ImportsEntry_DoNotUse::MapperData_ImportsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MapperData_ImportsEntry_DoNotUse::MergeFrom(const MapperData_ImportsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MapperData_ImportsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[5]);
}

// ===================================================================

class MapperData::_Internal {
 public:
};

MapperData::MapperData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sizes_(arena),
  imports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.MapperData)
}
MapperData::MapperData(const MapperData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sizes_(from.sizes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imports_.MergeFrom(from.imports_);
  // @@protoc_insertion_point(copy_constructor:MUTATOR.MapperData)
}

inline void MapperData::SharedCtor() {
}

MapperData::~MapperData() {
  // @@protoc_insertion_point(destructor:MUTATOR.MapperData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapperData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MapperData::ArenaDtor(void* object) {
  MapperData* _this = reinterpret_cast< MapperData* >(object);
  (void)_this;
  _this->imports_. ~MapField();
}
inline void MapperData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MapperData::ArenaDtor);
  }
}
void MapperData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapperData::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.MapperData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  imports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapperData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 sizes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .MUTATOR.ImportedModule> imports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&imports_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapperData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.MapperData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 sizes = 1;
  {
    int byte_size = _sizes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_sizes(), byte_size, target);
    }
  }

  // map<string, .MUTATOR.ImportedModule> imports = 2;
  if (!this->_internal_imports().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MUTATOR.MapperData.ImportsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_imports().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_imports().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
          it = this->_internal_imports().begin();
          it != this->_internal_imports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MapperData_ImportsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
          it = this->_internal_imports().begin();
          it != this->_internal_imports().end(); ++it) {
        target = MapperData_ImportsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.MapperData)
  return target;
}

size_t MapperData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.MapperData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sizes = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .MUTATOR.ImportedModule> imports = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_imports_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
      it = this->_internal_imports().begin();
      it != this->_internal_imports().end(); ++it) {
    total_size += MapperData_ImportsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapperData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapperData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapperData::GetClassData() const { return &_class_data_; }

void MapperData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapperData *>(to)->MergeFrom(
      static_cast<const MapperData &>(from));
}


void MapperData::MergeFrom(const MapperData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.MapperData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  imports_.MergeFrom(from.imports_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapperData::CopyFrom(const MapperData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.MapperData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapperData::IsInitialized() const {
  return true;
}

void MapperData::InternalSwap(MapperData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sizes_.InternalSwap(&other->sizes_);
  imports_.InternalSwap(&other->imports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapperData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[6]);
}

// ===================================================================

class LaunchData::_Internal {
 public:
  using HasBits = decltype(std::declval<LaunchData>()._has_bits_);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LaunchData::LaunchData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  callables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.LaunchData)
}
LaunchData::LaunchData(const LaunchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      callables_(from.callables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entry_ = from.entry_;
  // @@protoc_insertion_point(copy_constructor:MUTATOR.LaunchData)
}

inline void LaunchData::SharedCtor() {
entry_ = uint64_t{0u};
}

LaunchData::~LaunchData() {
  // @@protoc_insertion_point(destructor:MUTATOR.LaunchData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaunchData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaunchData::ArenaDtor(void* object) {
  LaunchData* _this = reinterpret_cast< LaunchData* >(object);
  (void)_this;
}
void LaunchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaunchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaunchData::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.LaunchData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callables_.Clear();
  entry_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaunchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_entry(&has_bits);
          entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 callables = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_callables(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_callables(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaunchData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.LaunchData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 entry = 1;
  if (_internal_has_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_entry(), target);
  }

  // repeated uint64 callables = 2;
  {
    int byte_size = _callables_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_callables(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.LaunchData)
  return target;
}

size_t LaunchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.LaunchData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 callables = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->callables_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _callables_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint64 entry = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_entry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaunchData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaunchData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaunchData::GetClassData() const { return &_class_data_; }

void LaunchData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LaunchData *>(to)->MergeFrom(
      static_cast<const LaunchData &>(from));
}


void LaunchData::MergeFrom(const LaunchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.LaunchData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  callables_.MergeFrom(from.callables_);
  if (from._internal_has_entry()) {
    _internal_set_entry(from._internal_entry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaunchData::CopyFrom(const LaunchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.LaunchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchData::IsInitialized() const {
  return true;
}

void LaunchData::InternalSwap(LaunchData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  callables_.InternalSwap(&other->callables_);
  swap(entry_, other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaunchData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[7]);
}

// ===================================================================

class ExportCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<ExportCallback>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_const(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_callable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ExportCallback::ExportCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.ExportCallback)
}
ExportCallback::ExportCallback(const ExportCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&size_)) + sizeof(unique_id_));
  // @@protoc_insertion_point(copy_constructor:MUTATOR.ExportCallback)
}

inline void ExportCallback::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_id_) -
    reinterpret_cast<char*>(&size_)) + sizeof(unique_id_));
}

ExportCallback::~ExportCallback() {
  // @@protoc_insertion_point(destructor:MUTATOR.ExportCallback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExportCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExportCallback::ArenaDtor(void* object) {
  ExportCallback* _this = reinterpret_cast< ExportCallback* >(object);
  (void)_this;
}
void ExportCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExportCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExportCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.ExportCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_id_) -
        reinterpret_cast<char*>(&size_)) + sizeof(unique_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExportCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MUTATOR.ExportCallback.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_const = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_const(&has_bits);
          is_const_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_callable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_callable(&has_bits);
          is_callable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unique_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_unique_id(&has_bits);
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExportCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.ExportCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MUTATOR.ExportCallback.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 size = 2;
  if (_internal_has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // optional bytes value = 3;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // optional bool is_const = 4;
  if (_internal_has_is_const()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_const(), target);
  }

  // optional bool is_callable = 5;
  if (_internal_has_is_callable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_callable(), target);
  }

  // optional uint32 unique_id = 6;
  if (_internal_has_unique_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.ExportCallback)
  return target;
}

size_t ExportCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.ExportCallback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

    // optional uint32 size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
    }

    // optional bool is_const = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_callable = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExportCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExportCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExportCallback::GetClassData() const { return &_class_data_; }

void ExportCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExportCallback *>(to)->MergeFrom(
      static_cast<const ExportCallback &>(from));
}


void ExportCallback::MergeFrom(const ExportCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.ExportCallback)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_const_ = from.is_const_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_callable_ = from.is_callable_;
    }
    if (cached_has_bits & 0x00000020u) {
      unique_id_ = from.unique_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExportCallback::CopyFrom(const ExportCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.ExportCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportCallback::IsInitialized() const {
  return true;
}

void ExportCallback::InternalSwap(ExportCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExportCallback, unique_id_)
      + sizeof(ExportCallback::unique_id_)
      - PROTOBUF_FIELD_OFFSET(ExportCallback, size_)>(
          reinterpret_cast<char*>(&size_),
          reinterpret_cast<char*>(&other->size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportCallback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[8]);
}

// ===================================================================

class ExpireCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpireCallback>()._has_bits_);
  static void set_has_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExpireCallback::ExpireCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.ExpireCallback)
}
ExpireCallback::ExpireCallback(const ExpireCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_left_ = from.time_left_;
  // @@protoc_insertion_point(copy_constructor:MUTATOR.ExpireCallback)
}

inline void ExpireCallback::SharedCtor() {
time_left_ = uint64_t{0u};
}

ExpireCallback::~ExpireCallback() {
  // @@protoc_insertion_point(destructor:MUTATOR.ExpireCallback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpireCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExpireCallback::ArenaDtor(void* object) {
  ExpireCallback* _this = reinterpret_cast< ExpireCallback* >(object);
  (void)_this;
}
void ExpireCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpireCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpireCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.ExpireCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_left_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpireCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 time_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_left(&has_bits);
          time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpireCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.ExpireCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 time_left = 1;
  if (_internal_has_time_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.ExpireCallback)
  return target;
}

size_t ExpireCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.ExpireCallback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 time_left = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_time_left());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpireCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpireCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpireCallback::GetClassData() const { return &_class_data_; }

void ExpireCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExpireCallback *>(to)->MergeFrom(
      static_cast<const ExpireCallback &>(from));
}


void ExpireCallback::MergeFrom(const ExpireCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.ExpireCallback)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_left()) {
    _internal_set_time_left(from._internal_time_left());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpireCallback::CopyFrom(const ExpireCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.ExpireCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpireCallback::IsInitialized() const {
  return true;
}

void ExpireCallback::InternalSwap(ExpireCallback* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_left_, other->time_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpireCallback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[9]);
}

// ===================================================================

class VersionUpdateCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<VersionUpdateCallback>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VersionUpdateCallback::VersionUpdateCallback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.VersionUpdateCallback)
}
VersionUpdateCallback::VersionUpdateCallback(const VersionUpdateCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MUTATOR.VersionUpdateCallback)
}

inline void VersionUpdateCallback::SharedCtor() {
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VersionUpdateCallback::~VersionUpdateCallback() {
  // @@protoc_insertion_point(destructor:MUTATOR.VersionUpdateCallback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VersionUpdateCallback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VersionUpdateCallback::ArenaDtor(void* object) {
  VersionUpdateCallback* _this = reinterpret_cast< VersionUpdateCallback* >(object);
  (void)_this;
}
void VersionUpdateCallback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionUpdateCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VersionUpdateCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.VersionUpdateCallback)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    version_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionUpdateCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MUTATOR.VersionUpdateCallback.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VersionUpdateCallback::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.VersionUpdateCallback)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string version = 1;
  if (_internal_has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MUTATOR.VersionUpdateCallback.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.VersionUpdateCallback)
  return target;
}

size_t VersionUpdateCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.VersionUpdateCallback)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VersionUpdateCallback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VersionUpdateCallback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VersionUpdateCallback::GetClassData() const { return &_class_data_; }

void VersionUpdateCallback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VersionUpdateCallback *>(to)->MergeFrom(
      static_cast<const VersionUpdateCallback &>(from));
}


void VersionUpdateCallback::MergeFrom(const VersionUpdateCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.VersionUpdateCallback)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VersionUpdateCallback::CopyFrom(const VersionUpdateCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.VersionUpdateCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionUpdateCallback::IsInitialized() const {
  return true;
}

void VersionUpdateCallback::InternalSwap(VersionUpdateCallback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionUpdateCallback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[10]);
}

// ===================================================================

class CallbackResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackResponse>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::MUTATOR::ExportCallback& export_(const CallbackResponse* msg);
  static void set_has_export_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::MUTATOR::ExpireCallback& expire(const CallbackResponse* msg);
  static void set_has_expire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MUTATOR::VersionUpdateCallback& version(const CallbackResponse* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::MUTATOR::ExportCallback&
CallbackResponse::_Internal::export_(const CallbackResponse* msg) {
  return *msg->export__;
}
const ::MUTATOR::ExpireCallback&
CallbackResponse::_Internal::expire(const CallbackResponse* msg) {
  return *msg->expire_;
}
const ::MUTATOR::VersionUpdateCallback&
CallbackResponse::_Internal::version(const CallbackResponse* msg) {
  return *msg->version_;
}
CallbackResponse::CallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.CallbackResponse)
}
CallbackResponse::CallbackResponse(const CallbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_export_()) {
    export__ = new ::MUTATOR::ExportCallback(*from.export__);
  } else {
    export__ = nullptr;
  }
  if (from._internal_has_expire()) {
    expire_ = new ::MUTATOR::ExpireCallback(*from.expire_);
  } else {
    expire_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::MUTATOR::VersionUpdateCallback(*from.version_);
  } else {
    version_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MUTATOR.CallbackResponse)
}

inline void CallbackResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&export__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&export__)) + sizeof(type_));
}

CallbackResponse::~CallbackResponse() {
  // @@protoc_insertion_point(destructor:MUTATOR.CallbackResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CallbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete export__;
  if (this != internal_default_instance()) delete expire_;
  if (this != internal_default_instance()) delete version_;
}

void CallbackResponse::ArenaDtor(void* object) {
  CallbackResponse* _this = reinterpret_cast< CallbackResponse* >(object);
  (void)_this;
}
void CallbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CallbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.CallbackResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(export__ != nullptr);
      export__->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(expire_ != nullptr);
      expire_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .MUTATOR.Callback type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MUTATOR::Callback>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.ExportCallback export = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_export_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.ExpireCallback expire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.VersionUpdateCallback version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallbackResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.CallbackResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .MUTATOR.Callback type = 1;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .MUTATOR.ExportCallback export = 2;
  if (_internal_has_export_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::export_(this), target, stream);
  }

  // optional .MUTATOR.ExpireCallback expire = 3;
  if (_internal_has_expire()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::expire(this), target, stream);
  }

  // optional .MUTATOR.VersionUpdateCallback version = 4;
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.CallbackResponse)
  return target;
}

size_t CallbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.CallbackResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .MUTATOR.ExportCallback export = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *export__);
    }

    // optional .MUTATOR.ExpireCallback expire = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expire_);
    }

    // optional .MUTATOR.VersionUpdateCallback version = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .MUTATOR.Callback type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallbackResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CallbackResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallbackResponse::GetClassData() const { return &_class_data_; }

void CallbackResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CallbackResponse *>(to)->MergeFrom(
      static_cast<const CallbackResponse &>(from));
}


void CallbackResponse::MergeFrom(const CallbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.CallbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_export_()->::MUTATOR::ExportCallback::MergeFrom(from._internal_export_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_expire()->::MUTATOR::ExpireCallback::MergeFrom(from._internal_expire());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_version()->::MUTATOR::VersionUpdateCallback::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallbackResponse::CopyFrom(const CallbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.CallbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackResponse::IsInitialized() const {
  return true;
}

void CallbackResponse::InternalSwap(CallbackResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackResponse, type_)
      + sizeof(CallbackResponse::type_)
      - PROTOBUF_FIELD_OFFSET(CallbackResponse, export__)>(
          reinterpret_cast<char*>(&export__),
          reinterpret_cast<char*>(&other->export__));
}

::PROTOBUF_NAMESPACE_ID::Metadata CallbackResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[11]);
}

// ===================================================================

class ServerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerResponse>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::MUTATOR::MapperData& mapperdata(const ServerResponse* msg);
  static void set_has_mapperdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::MUTATOR::LaunchData& launchdata(const ServerResponse* msg);
  static void set_has_launchdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::MUTATOR::CallbackResponse& callback(const ServerResponse* msg);
  static void set_has_callback(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::MUTATOR::MapperData&
ServerResponse::_Internal::mapperdata(const ServerResponse* msg) {
  return *msg->mapperdata_;
}
const ::MUTATOR::LaunchData&
ServerResponse::_Internal::launchdata(const ServerResponse* msg) {
  return *msg->launchdata_;
}
const ::MUTATOR::CallbackResponse&
ServerResponse::_Internal::callback(const ServerResponse* msg) {
  return *msg->callback_;
}
ServerResponse::ServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  binaries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.ServerResponse)
}
ServerResponse::ServerResponse(const ServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      binaries_(from.binaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mapperdata()) {
    mapperdata_ = new ::MUTATOR::MapperData(*from.mapperdata_);
  } else {
    mapperdata_ = nullptr;
  }
  if (from._internal_has_launchdata()) {
    launchdata_ = new ::MUTATOR::LaunchData(*from.launchdata_);
  } else {
    launchdata_ = nullptr;
  }
  if (from._internal_has_callback()) {
    callback_ = new ::MUTATOR::CallbackResponse(*from.callback_);
  } else {
    callback_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:MUTATOR.ServerResponse)
}

inline void ServerResponse::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapperdata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&mapperdata_)) + sizeof(session_id_));
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:MUTATOR.ServerResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mapperdata_;
  if (this != internal_default_instance()) delete launchdata_;
  if (this != internal_default_instance()) delete callback_;
}

void ServerResponse::ArenaDtor(void* object) {
  ServerResponse* _this = reinterpret_cast< ServerResponse* >(object);
  (void)_this;
}
void ServerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.ServerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mapperdata_ != nullptr);
      mapperdata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(launchdata_ != nullptr);
      launchdata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(callback_ != nullptr);
      callback_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MUTATOR.ServerResponse.token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes binaries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_binaries();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.MapperData mapperData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapperdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.LaunchData launchData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_launchdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MUTATOR.CallbackResponse callback = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_callback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.ServerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string token = 1;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MUTATOR.ServerResponse.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // optional uint32 type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional uint32 status = 3;
  if (_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // optional uint32 session_id = 4;
  if (_internal_has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_session_id(), target);
  }

  // repeated bytes binaries = 5;
  for (int i = 0, n = this->_internal_binaries_size(); i < n; i++) {
    const auto& s = this->_internal_binaries(i);
    target = stream->WriteBytes(5, s, target);
  }

  // optional .MUTATOR.MapperData mapperData = 6;
  if (_internal_has_mapperdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mapperdata(this), target, stream);
  }

  // optional .MUTATOR.LaunchData launchData = 7;
  if (_internal_has_launchdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::launchdata(this), target, stream);
  }

  // optional .MUTATOR.CallbackResponse callback = 8;
  if (_internal_has_callback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::callback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.ServerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes binaries = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(binaries_.size());
  for (int i = 0, n = binaries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      binaries_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token());
    }

    // optional .MUTATOR.MapperData mapperData = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapperdata_);
    }

    // optional .MUTATOR.LaunchData launchData = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launchdata_);
    }

    // optional .MUTATOR.CallbackResponse callback = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *callback_);
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

    // optional uint32 session_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerResponse::GetClassData() const { return &_class_data_; }

void ServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerResponse *>(to)->MergeFrom(
      static_cast<const ServerResponse &>(from));
}


void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  binaries_.MergeFrom(from.binaries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mapperdata()->::MUTATOR::MapperData::MergeFrom(from._internal_mapperdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_launchdata()->::MUTATOR::LaunchData::MergeFrom(from._internal_launchdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_callback()->::MUTATOR::CallbackResponse::MergeFrom(from._internal_callback());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  return true;
}

void ServerResponse::InternalSwap(ServerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  binaries_.InternalSwap(&other->binaries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_, lhs_arena,
      &other->token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerResponse, session_id_)
      + sizeof(ServerResponse::session_id_)
      - PROTOBUF_FIELD_OFFSET(ServerResponse, mapperdata_)>(
          reinterpret_cast<char*>(&mapperdata_),
          reinterpret_cast<char*>(&other->mapperdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[12]);
}

// ===================================================================

class InstanceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InstanceRequest>()._has_bits_);
  static void set_has_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unique_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InstanceRequest::InstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.InstanceRequest)
}
InstanceRequest::InstanceRequest(const InstanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mapper_, &from.mapper_,
    static_cast<size_t>(reinterpret_cast<char*>(&unique_key_) -
    reinterpret_cast<char*>(&mapper_)) + sizeof(unique_key_));
  // @@protoc_insertion_point(copy_constructor:MUTATOR.InstanceRequest)
}

inline void InstanceRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mapper_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unique_key_) -
    reinterpret_cast<char*>(&mapper_)) + sizeof(unique_key_));
}

InstanceRequest::~InstanceRequest() {
  // @@protoc_insertion_point(destructor:MUTATOR.InstanceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InstanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InstanceRequest::ArenaDtor(void* object) {
  InstanceRequest* _this = reinterpret_cast< InstanceRequest* >(object);
  (void)_this;
}
void InstanceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InstanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.InstanceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&mapper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unique_key_) -
        reinterpret_cast<char*>(&mapper_)) + sizeof(unique_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool mapper = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mapper(&has_bits);
          mapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unique_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unique_key(&has_bits);
          unique_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InstanceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.InstanceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool mapper = 1;
  if (_internal_has_mapper()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mapper(), target);
  }

  // optional uint32 unique_key = 2;
  if (_internal_has_unique_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unique_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.InstanceRequest)
  return target;
}

size_t InstanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.InstanceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool mapper = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_key());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InstanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InstanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InstanceRequest::GetClassData() const { return &_class_data_; }

void InstanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InstanceRequest *>(to)->MergeFrom(
      static_cast<const InstanceRequest &>(from));
}


void InstanceRequest::MergeFrom(const InstanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.InstanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mapper_ = from.mapper_;
    }
    if (cached_has_bits & 0x00000002u) {
      unique_key_ = from.unique_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InstanceRequest::CopyFrom(const InstanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.InstanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceRequest::IsInitialized() const {
  return true;
}

void InstanceRequest::InternalSwap(InstanceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstanceRequest, unique_key_)
      + sizeof(InstanceRequest::unique_key_)
      - PROTOBUF_FIELD_OFFSET(InstanceRequest, mapper_)>(
          reinterpret_cast<char*>(&mapper_),
          reinterpret_cast<char*>(&other->mapper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstanceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[13]);
}

// ===================================================================

MutatorRequest_ImportsEntry_DoNotUse::MutatorRequest_ImportsEntry_DoNotUse() {}
MutatorRequest_ImportsEntry_DoNotUse::MutatorRequest_ImportsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MutatorRequest_ImportsEntry_DoNotUse::MergeFrom(const MutatorRequest_ImportsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MutatorRequest_ImportsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[14]);
}

// ===================================================================

class MutatorRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MutatorRequest>()._has_bits_);
  static void set_has_unique_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MutatorRequest::MutatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bases_(arena),
  imports_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MUTATOR.MutatorRequest)
}
MutatorRequest::MutatorRequest(const MutatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bases_(from.bases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imports_.MergeFrom(from.imports_);
  unique_key_ = from.unique_key_;
  // @@protoc_insertion_point(copy_constructor:MUTATOR.MutatorRequest)
}

inline void MutatorRequest::SharedCtor() {
unique_key_ = 0u;
}

MutatorRequest::~MutatorRequest() {
  // @@protoc_insertion_point(destructor:MUTATOR.MutatorRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MutatorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MutatorRequest::ArenaDtor(void* object) {
  MutatorRequest* _this = reinterpret_cast< MutatorRequest* >(object);
  (void)_this;
  _this->imports_. ~MapField();
}
inline void MutatorRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MutatorRequest::ArenaDtor);
  }
}
void MutatorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MutatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:MUTATOR.MutatorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bases_.Clear();
  imports_.Clear();
  unique_key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutatorRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unique_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unique_key(&has_bits);
          unique_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 bases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_bases(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .MUTATOR.ImportedModule> imports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&imports_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MutatorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MUTATOR.MutatorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 unique_key = 1;
  if (_internal_has_unique_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_key(), target);
  }

  // repeated uint64 bases = 2;
  {
    int byte_size = _bases_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_bases(), byte_size, target);
    }
  }

  // map<string, .MUTATOR.ImportedModule> imports = 3;
  if (!this->_internal_imports().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MUTATOR.MutatorRequest.ImportsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_imports().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_imports().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
          it = this->_internal_imports().begin();
          it != this->_internal_imports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MutatorRequest_ImportsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
          it = this->_internal_imports().begin();
          it != this->_internal_imports().end(); ++it) {
        target = MutatorRequest_ImportsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MUTATOR.MutatorRequest)
  return target;
}

size_t MutatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MUTATOR.MutatorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 bases = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->bases_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .MUTATOR.ImportedModule> imports = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_imports_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::MUTATOR::ImportedModule >::const_iterator
      it = this->_internal_imports().begin();
      it != this->_internal_imports().end(); ++it) {
    total_size += MutatorRequest_ImportsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional uint32 unique_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MutatorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MutatorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MutatorRequest::GetClassData() const { return &_class_data_; }

void MutatorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MutatorRequest *>(to)->MergeFrom(
      static_cast<const MutatorRequest &>(from));
}


void MutatorRequest::MergeFrom(const MutatorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MUTATOR.MutatorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bases_.MergeFrom(from.bases_);
  imports_.MergeFrom(from.imports_);
  if (from._internal_has_unique_key()) {
    _internal_set_unique_key(from._internal_unique_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MutatorRequest::CopyFrom(const MutatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MUTATOR.MutatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutatorRequest::IsInitialized() const {
  return true;
}

void MutatorRequest::InternalSwap(MutatorRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bases_.InternalSwap(&other->bases_);
  imports_.InternalSwap(&other->imports_);
  swap(unique_key_, other->unique_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MutatorRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_2eproto_getter, &descriptor_table_mutator_2eproto_once,
      file_level_metadata_mutator_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MUTATOR
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MUTATOR::AuthRequest* Arena::CreateMaybeMessage< ::MUTATOR::AuthRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::AuthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::MutatorSettings* Arena::CreateMaybeMessage< ::MUTATOR::MutatorSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::MutatorSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::InitializationRequest* Arena::CreateMaybeMessage< ::MUTATOR::InitializationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::InitializationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::ImportedModule_FunctionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::ImportedModule* Arena::CreateMaybeMessage< ::MUTATOR::ImportedModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::ImportedModule >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::MapperData_ImportsEntry_DoNotUse* Arena::CreateMaybeMessage< ::MUTATOR::MapperData_ImportsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::MapperData_ImportsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::MapperData* Arena::CreateMaybeMessage< ::MUTATOR::MapperData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::MapperData >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::LaunchData* Arena::CreateMaybeMessage< ::MUTATOR::LaunchData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::LaunchData >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::ExportCallback* Arena::CreateMaybeMessage< ::MUTATOR::ExportCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::ExportCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::ExpireCallback* Arena::CreateMaybeMessage< ::MUTATOR::ExpireCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::ExpireCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::VersionUpdateCallback* Arena::CreateMaybeMessage< ::MUTATOR::VersionUpdateCallback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::VersionUpdateCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::CallbackResponse* Arena::CreateMaybeMessage< ::MUTATOR::CallbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::CallbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::ServerResponse* Arena::CreateMaybeMessage< ::MUTATOR::ServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::ServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::InstanceRequest* Arena::CreateMaybeMessage< ::MUTATOR::InstanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::InstanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse* Arena::CreateMaybeMessage< ::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::MutatorRequest_ImportsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MUTATOR::MutatorRequest* Arena::CreateMaybeMessage< ::MUTATOR::MutatorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MUTATOR::MutatorRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
